name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # 允许手动触发

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter server run db:generate

      - name: Build all packages
        run: pnpm run build

      - name: Create deployment archive
        run: |
          # 创建统一部署包
          mkdir -p deploy-temp/server deploy-temp/web deploy-temp/admin
          
          # 复制服务端文件
          cp -r packages/server/dist packages/server/package.json packages/server/prisma packages/server/.env.example deploy-temp/server/
          
          # 复制前端文件
          cp -r packages/web/dist/* deploy-temp/web/
          cp -r packages/admin/dist/* deploy-temp/admin/
          
          # 复制配置文件
          cp nginx.conf ecosystem.config.js deploy-temp/
          
          # 打包所有文件
          tar -czf deploy-all.tar.gz deploy-temp/
          rm -rf deploy-temp/

      - name: Prepare server directory
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT || 22 }}
          script: |
            # 创建部署目录
            mkdir -p /data/web-notification/server
            mkdir -p /data/web-notification/web
            mkdir -p /data/web-notification/admin

            # 停止现有服务（如果运行中）
            pm2 stop web-notification-server || true

      - name: Copy all files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT || 22 }}
          source: 'deploy-all.tar.gz'
          target: '/data/web-notification/'

      - name: Extract and setup files
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT || 22 }}
          script: |
            cd /data/web-notification

            # 解压所有文件
            tar -xzf deploy-all.tar.gz

            # 移动文件到正确位置
            rm -rf server/* web/* admin/* || true
            mv deploy-temp/server/* server/
            mv deploy-temp/web/* web/
            mv deploy-temp/admin/* admin/
            mv deploy-temp/nginx.conf ./
            mv deploy-temp/ecosystem.config.js ./

            # 清理临时文件
            rm -rf deploy-temp/ deploy-all.tar.gz

      - name: Setup environment and start server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT || 22 }}
          script: |
            cd /data/web-notification/server

            # 设置环境变量
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
            echo "VAPID_PUBLIC_KEY=${{ secrets.VAPID_PUBLIC_KEY }}" >> .env
            echo "VAPID_PRIVATE_KEY=${{ secrets.VAPID_PRIVATE_KEY }}" >> .env
            echo "NODE_ENV=production" >> .env
            echo "PORT=10901" >> .env

            # 加载环境
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            # 安装生产依赖
            npm install --omit=dev

            # 生成 Prisma 客户端
            npx prisma generate

            # 运行数据库迁移
            npx prisma db push --accept-data-loss

            # 创建日志目录
            mkdir -p /data/web-notification/logs

            # 使用 PM2 配置文件启动/重启服务
            cd /data/web-notification
            pm2 restart ecosystem.config.js --update-env || pm2 start ecosystem.config.js
            pm2 save

      - name: Reload nginx
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT || 22 }}
          script: |
            # 检查 nginx 配置
            nginx -t
            # 重新加载 nginx
            nginx -s reload || systemctl reload nginx
